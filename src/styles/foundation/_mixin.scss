@use 'sass:math';
@use './media' as *;

// --------------------
// Defined
// --------------------
$DEFAULT_FONT_SIZE: 16;
$BREAKPOINT_SP: 375;
$BREAKPOINT_TABLET: 768;
$BREAKPOINT_PC: 1366;
$MAX_DEVICE_WIDTH: 1600;
$CONTENTS_WIDTH: 1024;

// --------------------
// Utility Functions
// --------------------

/*
* pxをremに変換する
* $px[Number]: px [ex: 16]
* retune[String]: rem変換した単位 [ex: 1rem]
*/
@function rem($px) {
  @return math.div($px, 16) * 1rem;
}

/*
* pxをvwに変換する
* デフォルトはコンテンツ幅に対してのvw変換
* $px[Number]: px [ex: 683]
* $vw[Number]: コンテンツ幅 [ex: 1366]
* retune[String]: vw変換した単位 [ex: 50vw]
*/
@function vw($px, $vw: $CONTENTS_WIDTH) {
  @return math.div($px, $vw) * 100vw;
}

/*
* pxをvwに変換する
* SPデバイス専用
* retune[String]: vw変換した単位 [ex: 50vw]
*/
@function spvw($px, $vw: $SP_DEVICE_WIDTH) {
  @return #{calcPercent($px, $vw)}vw;
}


/*
* 100分率に変換するして小数点第3位にまとめる
* $numerator[Number]: 分子 [ex: 300]
* $denominator[Number]: 分母 [ex: 1024]
* retune[Number]:%なしの数字 [ex: 29.296]
*/
@function calcPercent($numerator, $denominator) {
  @return roundNumber(math.div($numerator, $denominator) * 100);
}


/*
* line-heightを小数点第3位に丸める
* $height[Number]: 分子 [ex: 28]
* $fontSize[Number]: 分母 [ex: 13]
* retune[String]: %表記 [ex: 0.737]
*/
@function calcLineHeight($height, $fontSize) {
  $lineHeight: math.div($height, $fontSize);
  @return #{roundNumber($lineHeight)};
}


// 小数点3桁にする
// ex) 123.456789 => 123.457
@function roundNumber($num) {
  @return math.div(round($num * 1000), 1000);
}

// --------------------
// Functions
// --------------------


/**
* 0 < $min < $middle < $max
* 最小のサイズを渡すと、clampを返す関数
* 推奨値と最大値を設定することもできる
* 推奨値や最大値が設定されたときには、そちらが優先される
* 最大値が設定されていた場合、推奨値は最大値に合わせる
* 基本的に$middleは0
*/
@function clamp_rem($min, $middle: 0, $max: 0) {
  // 最小値から滑らかにサイズが上がるように計算されたvw
  $calculated_middle_fz_for_min: roundNumber(calcPercent($min, $BREAKPOINT_TABLET));

  // 最大値に滑らかに移行するように計算されたvw
  $calculated_middle_fz_for_max: roundNumber(calcPercent($max, $BREAKPOINT_PC));

  // tabletサイズの時に計算された推奨値
  $calculated_middle_fz_for_middle: roundNumber(calcPercent($middle, $BREAKPOINT_TABLET));

  // $minがPC幅になったときのサイズを計算
  $calculated_max_fz: round($BREAKPOINT_PC * math.div($calculated_middle_fz_for_min, 100));

  /**
  最小値
  */
  $min_size: rem($min);

  /**
  * 推奨値
  * 推奨値が指定されていなかったら、最小値から算出する
  */
  $middle_fz: $calculated_middle_fz_for_min;
  @if ($middle != 0) {
    $middle_fz: $calculated_middle_fz_for_middle;
  } @else {
    @if ($max != 0) {
      $middle_fz: $calculated_middle_fz_for_max;
    }
  }

  /**
  * 最大値
  * 最大値が指定されていなかったら最小値から算出する
  * 最大値が設定されていない、かつ、推奨値が設定されている場合は、推奨値を最大値とする
  */
  $max_fz: rem($calculated_max_fz);
  @if ($max != 0) {
    $max_fz: rem($max);
  } @else {
    @if ($middle != 0) {
      $max_fz: rem($middle);
    }
  }

  @return clamp(#{$min_size}, #{$middle_fz}vw, #{$max_fz});
}

// --------------------------
// Animations
// --------------------------

// Button Animation
@mixin bgSlideAnimation() {
  display: block;
  content: "";
  position: absolute;
  left: 0;
  bottom: 0;
  width: 0;
  height: 100%;
  background-color: var(--color-secondary);
  transition: width 0.2s;
}

@mixin bgSlideAnimation-hover() {
  width: 100%;
}

@mixin lineAnimation() {
  position: absolute;
  content: "";
  bottom: 0;
  left: 0;
  width: 0;
  height: 1px;
  background-color: var(--color-main);
  transition: 0.2s ease;
}

@mixin lineAnimation-hover() {
  width: 100%;
}


// VW（最大幅あり）
@mixin customVw($param, $sp, $pc) {
  #{$param}: spvw($sp);

  @include media('md') {
    #{$param}: vw($pc);
  }

  @include media('lg') {
    #{$param}: rem($pc);
  }
}


@mixin font-size($sp, $pc) {
  @include customVw('font-size', $sp, $pc);
}

@mixin flex-basis($sp, $pc) {
  @include customVw('flex-basis', $sp, $pc);
}

@mixin width($sp, $pc) {
  @include customVw('width', $sp, $pc);
}

@mixin height($sp, $pc) {
  @include customVw('height', $sp, $pc);
}

@mixin margin-top($sp, $pc) {
  @include customVw('margin-top', $sp, $pc);
}

@mixin margin-right($sp, $pc) {
  @include customVw('margin-right', $sp, $pc);
}

@mixin margin-bottom($sp, $pc) {
  @include customVw('margin-bottom', $sp, $pc);
}

@mixin margin-left($sp, $pc) {
  @include customVw('margin-left', $sp, $pc);
}

@mixin padding-top($sp, $pc) {
  @include customVw('padding-top', $sp, $pc);
}

@mixin padding-right($sp, $pc) {
  @include customVw('padding-right', $sp, $pc);
}

@mixin padding-bottom($sp, $pc) {
  @include customVw('padding-bottom', $sp, $pc);
}

@mixin padding-left($sp, $pc) {
  @include customVw('padding-left', $sp, $pc);
}

@mixin absolute-right($right, $right-pc) {
  @include customVw(right, $right, $right-pc);
}

@mixin absolute-top-left($top, $left, $top-pc, $left-pc) {
  @include customVw(top, $top, $top-pc);
  @include customVw(left, $left, $left-pc);
}

@mixin absolute-bottom-right($right, $bottom, $right-pc, $bottom-pc) {
  @include customVw(right, $right, $right-pc);
  @include customVw(bottom, $bottom, $bottom-pc);
}


// --------------------------
// SNS Icon
// --------------------------

// SNSのアイコンを中央よせする
// ex) $size = 30
@mixin circleIcon($size) {
  display: grid;
  place-items: center;
  width: rem($size);
  aspect-ratio: 1 / 1;
  clip-path: circle(50%);
  @supports not (aspect-ratio: 1/ 1) {
    height: $size;
  }
}

@mixin lineHeightCrop($line-height) {
  &::before {
    display: block;
    width: 0;
    height: 0;
    margin-top: calc((1 - #{$line-height}) * 0.5em);
    content: "";
  }

  &::after {
    display: block;
    width: 0;
    height: 0;
    margin-bottom: calc((1 - #{$line-height}) * 0.5em);
    content: "";
  }
}

@mixin jaStringBreakControl() {
  span:not([class]) {
    display: inline-block;
  }

  span.t-jaStringBr-sp {
    display: inline-block;

    @include media() {
      display: inline;
    }
  }

  span.t-jaStringBr-pc {
    @include media() {
      display: inline-block;
    }
  }
}


@mixin hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}


// --------------------------
// アクセシビリティ
// --------------------------
// Bootstrap ver
@mixin sr-only {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Apple ver
// @mixin sr-only {
//   position: absolute;
//   width: 1px;
//   height: 1px;
//   padding: 0;
//   overflow: hidden;
//   clip: rect(1px, 1px, 1px, 1px);
//   -webkit-clip-path: inset(0px 0px 99.9% 99.9%);
//   clip-path: inset(0px 0px 99.9% 99.9%);
//   border: 0;
// }
